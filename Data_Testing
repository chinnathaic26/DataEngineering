Data Integrity Testing: Ensures relationships, uniqueness, and data consistency.
Data Accuracy Testing: Ensures that data is valid and accurate.
Data Completeness Testing: Ensures no data is missing and all required fields are filled.
Data Consistency Testing: Ensures consistent data across tables and systems.
Data Transformation Testing: Validates the correctness of ETL processes.
Performance Testing: Ensures that the database performs optimally under load.
Security Testing: Ensures that data is secure and protected from unauthorized access.




Data Integrity Testing:

Entity Integrity == primary Key constraint
===========================================
uniqueness of primary key:

-- Check for duplicate primary keys (e.g., customer_id in Customers table)
SELECT customer_id, COUNT(*)
FROM Customers
GROUP BY customer_id
HAVING COUNT(*) > 1;

Referential Integrity == foreign key constraint
===============================================
foreign key between orders and customer table:


-- Check if any orders exist with a non-existent customer_id
SELECT order_id
FROM Orders
WHERE customer_id NOT IN (SELECT customer_id FROM Customers);

Domain Integrity == datatype
================================================
-- Ensure that all ages are integers (assuming the "age" column should be an integer)
SELECT * FROM Users WHERE NOT age = CAST(age AS INTEGER);
range constraint

-- Ensure that the salary is within a reasonable range (between $30,000 and $500,000)
SELECT employee_id, salary
FROM Employees
WHERE salary NOT BETWEEN 30000 AND 500000;

User Defined Integrity Testing
===============================================
-- Ensure the order_date is earlier than the ship_date
ALTER TABLE Orders
ADD CONSTRAINT order_date_before_ship_date
CHECK (order_date < ship_date);
Expected Outcome: The constraint should prevent insertion of data where the order_date is after the ship_date.

Data Consistency Testing
===============================================

Data Validations must match between source and target.

Null Values Check:
================================================
-- Ensure that no customer has a missing customer_id
SELECT * FROM Customers WHERE customer_id IS NULL;


=====================================================================================================================================
Data Accuracy Testing

1. cross field Data Validations

-- Ensure that the end_date is always after the start_date for each project
SELECT project_id, start_date, end_date
FROM Projects
WHERE start_date >= end_date;

2. Source data validation

-- Compare product prices with an external product price list (assuming the external data is in another table)
SELECT p.product_id, p.product_name, p.price AS database_price, e.price AS external_price
FROM Products p
JOIN External_Product_Price e ON p.product_id = e.product_id
WHERE p.price != e.price;

3. Aggergate Validation

-- Calculate the total sales for a particular month and ensure it matches the total in the `Sales_Summary` table
SELECT SUM(amount) AS calculated_total_sales
FROM Orders
WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31';

-- Compare with stored total in Sales_Summary table
SELECT total_sales
FROM Sales_Summary
WHERE sales_month = '2024-01';

4. Data Format Validation

-- Ensure that all email addresses in the Users table are in the correct format
SELECT user_id, email
FROM Users
WHERE email NOT LIKE '%@%.%';


5. Business Rule Validation

-- Ensure that customers' ages fall between 18 and 120
SELECT customer_id, age
FROM Customers
WHERE age < 18 OR age > 120;


6. Duplicate Data Detection

-- Check for duplicate email addresses in the Users table
SELECT email, COUNT(*)
FROM Users
GROUP BY email
HAVING COUNT(*) > 1;


7. ETL Logics

-- Ensure that the price after discount is correctly calculated (assuming a 10% discount)
SELECT product_id, price, (price * 0.9) AS expected_price_after_discount
FROM Products
WHERE price != (price * 0.9);

8. Data reconciliation

-- Check that the order_id in Orders table matches the one in Shipped_Orders table
SELECT COUNT(*) AS missing_orders
FROM Orders o
LEFT JOIN Shipped_Orders s ON o.order_id = s.order_id
WHERE s.order_id IS NULL;


9. Data Completeness

no critical values missing

-- Ensure that important fields (order_id, customer_id, and order_date) are not null in Orders table
SELECT COUNT(*)
FROM Orders
WHERE order_id IS NULL OR customer_id IS NULL OR order_date IS NULL;


























