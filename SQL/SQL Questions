1> 
select all columns in table:

select * from table_name;

2> 
select specific column from table:

select colum1,colum2 from table_name;

3>
disticnt value from column:

select distinct(first_name) from emp;

4>
count number of rows in table:

select count(*) from emp;

5>
Find Max from column:

select max(salary) from emp;

6>
find minimum value in a column:

select min(salary) from emp;

7>
sum of value in a column:

select sum(salary) from emp;

8>
average value from a column

select AVG(salary) from emp;

9> 
sort in ascending order:

select * from emp order by salary asc;

10>

sort in desc order:

select * from emp order by salary desc;

11>
filter rows using Where clause:

select * from emp where depart_id=10;

12> 
use multiple conditions with AND.

select * from empy where depart_id=10 and salary>10000;

13>
use multiple conditions with OR:

select * from employ where depart_id=10 or salary>19833;

14> 
BETWEEN Operator:

select * from emp where salary between 1000 and 5000;

15>
LIKE Operator:

select * from emp where last_name like '%smith';

16>
NOT LIKE Operator:

select * from emp where last_name NOT LIKE '%es';

17>
find rows with Null values:

select * from emp where comm is null;

18>
find rows without NULL values:

select * from emp where comm is not null;

19>
IN Operator:

select * from emp where dept_id IN (10,20,30);

20>
NOT IN Operator:

select * from emp where dept_id NOT IN (30,20);

21> Inner join:

select e.*,d.* from emp e inner join dept d on e.dept_id=d.dept_id

22>
left outer join:

select e.*,d.* from emp e left join dept d on e.dept_id=d.dept_id

23> 
right outer join:

select e.*,d.* from emp e right join dept d on e.dept_id=d.dept_id

24>
full outer join:

select e.*,d.* from emp e full outer join dept d on e.dept_id=d.dept_id

25>
cross join:
select e.*,d.* from emp e cross join dept d ;

26>
 group data and calculate aggregate:

select id,count(*) from emp group by id;

27>
group data and calculate multiple aggregate:

select id,count(*),avg(salary) from emp group by id;

28>
group data and having clause:

select id,count(*) from emp group by id having count(*)>5;

29>
calculate the sum of values for each group:

select id,sum(sal) as total_salaries from emp group by id;

30>
Highest salary in each dept:

select id,max(sal) as high_sal from emp group by id;

31>
subquery in WHERE clause:

SELECT * FROM emp where depart_id = (select depart_d from depatment);

32>
use subquery in FROM Clause:

SELECT avg.dept_id,AVG(avg.salary) from (select dept_d,salary from emp) avg group by avg.dept_id;

33> 
coorelated subquery:

SELECT first_name, salary
FROM employees e1
WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e1.department_id = e2.department_id);

34>
subquery in select clause:

SELECT first_name,salary,(select dept_name from departments where id= emp.id) as dept_name
from emp;

35>
find emp with salaries greater than average salary:

select * from emp where sal>(select avg(sal) from emp);

36>
window function to rank rows

select first_name,sal ,rank() over(order by salary desc) as rank from emp;

37>
calculate running totals with window function

select name,sal,sum(sal) over(order by sal) as running_total from emp;

38> Fetch unique records from table:

select distinct(name) from employees;

39> default constraint in table:

create table empl(
id int primary key,
bk char default 'AUDIT'
);

40> Write a query to list customers who have placed more than 5 orders. Use the customers and orders tables.

select customer_name from customers where id=( select cust_id from orders group by cust_id having count(*) >=5);

41> Calculate the total revenue, average revenue, and the count of orders grouped by product category in the sales table.

select sum(revenue),avg(revenue),count(revenue) from sales group by produt_category;

42> Write a query to find the names of employees who earn more than the average salary in the company.

select employee_name from employees where salary> (select avg(salary) from employees);

43> Write a query to list all employees and their department names, including employees who don’t belong to any department.

select e.*.d.* from employees e left join department d on e.id=d.id;

44> Write a query to list employees along with their manager’s name. Assume there’s a column manager_id in the employees table that points to another employee’s employee_id.
SELECT e.employee_name AS employee, m.employee_name AS manager
 
FROM employees e
 
LEFT JOIN employees m ON e.manager_id = m.employee_id;

45> Write a query to categorize employees based on their salary into “High”, “Medium”, and “Low” categories.

SELECT employee_name,
 
       CASE 
 
           WHEN salary > 100000 THEN 'High'
 
           WHEN salary BETWEEN 50000 AND 100000 THEN 'Medium'
 
           ELSE 'Low'
 
       END AS salary_category
 
FROM employees;

46> Find duplicate records:
SELECT email, COUNT(*) AS count
FROM users
GROUP BY email
HAVING COUNT(*) > 1;

47> Write a query to assign a row number to each employee, ordered by their salary in descending order.

SELECT employee_name, salary, 
 
       ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num
 
FROM employees;

48> How can you improve the performance of a slow query?
Answer:
To improve query performance:

Use indexes on frequently queried columns.
Optimize joins: Avoid unnecessary joins and subqueries.
Rewrite subqueries as joins where possible.
Limit data: Only select the necessary columns, not SELECT *.
Use EXPLAIN to analyze query plans and identify bottlenecks.
Avoid complex operations in WHERE clauses (e.g., functions on columns).

50> What is Cascading in Foreign Keys?
Answer:
Cascading is a set of rules that define what happens to related rows when a row in a referenced table is updated or deleted.

CASCADE: Automatically updates or deletes rows in the child table when the corresponding row in the parent table is updated or deleted.
SET NULL: Sets the foreign key values to NULL when the parent row is deleted.
NO ACTION: Prevents the update or delete operation if there are any related rows in the child table.

51> full form of SQL
strucuture query language

52> Views are also known as virtual tables

53> how many primary key a table can have?
only one

54> which datatype can store unstructure data type in a column? 
RAW

55> What is returned by INSTR ('JAVAT POINT', 'P')?
7

56> Command that let u change one or more fields in a table is?
MODIFY

58> clause creates temporary relation for the query on which it is defined.
WITH Clause

59> SELECT ROUND (65.726, -1) FROM DUAL;  

60> command makes the updates performed by the transaction permanent in the database?
COMMIT

61> Which type of JOIN is used to returns rows that do not have matching values?
OUTER JOIN

62> Group of operations that form a single logical unit of work is known as
TRANSACTION

63> Shared locks are applied while performing
READ




