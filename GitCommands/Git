List of Commands :

1. Git --Version or Git -v

2. git --help or git -h

3. git - C <path>  -- git - C <directory path>  commit -m "new commit changes"  ===> allows to run the git commands in different directory than the current directory

4. git -c <name>=<value>  -- git -c <user.name>=<anupappu> commit -m " set new user name n run" ===> allows to set a configuration of command specified for single run alone, doesnt change global or local configuration.

5. export GIT_USER_EMAIL=john@example.com
git --config-env=user.email=GIT_USER_EMAIL commit -m "Commit with environment-based user email"  ===> allows to set dynamically env variable in command 

6. git --exec-path=/opt/git/bin pull   ===> allows to use the executable path having diff versions or core programs of git to run the command

7. git --html-path ===> This command displays the path to the directory containing Git's HTML documentation files.

8.  git --man-path ===> This command will output the path to the directory where Git’s manual pages are installed.

9. git --info-path ===> this command will give info files documenting this version of git

10. git -paginate ===> option that helps with viewing long outputs by paging through them.

11. git --git-dir=/path/to/repo/.git <command> ===> option in Git is used to specify the location of the .git directory.

12. --work-tree=<path>  ===> specifies the working directory for the repository. This is particularly useful when the working directory and the .git directory are in different locations.

13. --namespace=<path>  ===> Namespaces are a feature in Git that allow you to organize and separate multiple repositories within a single Git directory. This is particularly useful for managing and isolating different projects or parts of a large project.

14. bare ==> In Git, a "bare" repository is a repository that does not have a working directory. Instead, it only contains the version control information (the .git directory) and no checked-out copies of the files. 
 
15. git add file1.txt file2.txt ===>  is used to add changes from the working directory to the staging area. This prepares changes for the next commit. 

16. git am  ===> The git am command is used to apply patches from email messages or mailboxes.

17. git -- archive ===> command is used to create an archive file of files from a Git repository.
git archive --format=zip -o archive-name.zip HEAD ===> archive current branch
git archive --format=tar --prefix=project-name/ -o archive-name.tar commit-or-branch-name  ===> create achive of a specific commit or branch
git archive --format=zip -o master.zip master  ===> creating a zip archive of the master branch.

18. git -bisect  ===> tool to find the commit that shows a bug in commit history 
git bisect start
git bisect bad - specify bad commit
git bisect good commit-hash - specify good commit.
git bisect reset

19. git branch ===> git branch (list all branches)
git branch <branch_name> ( create new branch )
git branch -d <branch name> ( delete specified branch)
git branch -D <branch name> ( force deletion )
git branch -m <new branch name> ( rename a branch)
git checkout <branch_name>  (to always switch to the branch where you want to create a new branch or make changes)

20. git bundle ===>  used to create a single file that contains a repository or a subset of a repository, which can then be transferred to another location or system
git bundle create <file.bundle> --all

21.git checkout ===> used to switch between different branches or commit states in your repository. 
git checkout -b <new_branch_name>

22. git cherry-pick ===> allows you to apply the changes from specific commits onto your current branch. This is useful when you want to incorporate individual commits from one branch into another without merging the entire branch.
git cherry-pick <commit_hash>

23. git citool ===>  is a graphical interface for the git commit command. It provides a visual way to review and stage changes before making a commit. 

24. git clean -f ===> remove untracked files in the working directory

25. git clone <repo url> ===> clone a remote repo to local 

26. git commit ===> used to record changes in the local repository.
git commit -m "commit message "

27. git describe ===> used to give a human-readable name to a commit.

28.git diff ===> show changes in commit ,commits and working directory etc..

29. git fetch ===>  is used to download commits, files, and references from a remote repository into your local repository.

30. git gc ===> remove unnecessary files from local repo

31.git grep ====> pattern match
git grep "password" -- find all occurence of password in repo.
git grep "fixme" -- src/  -- in source directory.
git grep "bug" $(git rev-list --all) -- across all branches.

32. git gui ===> graphical user interface to git

33. git -init ===> create an empty git repo or reinitialize existing one

34. git -log ===> show commit logs

35. git merge ===> used to integrate changes from diff branches into current branch in git rep
git merge <branch-name> - merge into currently checked out branch

resolving conflicts - 1. identify conflicts
resolve the conflicts
after that stage the chages using git add
complete the merge - git commit

36.git -mv ===> to move or rename files and directories.

staging the changes, 
When you use git mv, Git automatically stages the move or rename operation. This means you don't need to run git add separately; the change is already prepared for the next commit.
Committing the Changes
After using git mv, you should commit the changes to finalize the move or rename in the repository:
git commit -m "Renamed or moved file"

37. git -notes ===> used to add, edit, display, or delete notes associated with commits in a Git repository. 

git notes add -m "Your note here" <commit -hash>


38. git pull ===> used to fetch and integrate changes from a remote repository into your current branch. It’s a combination of two commands: git fetch (which retrieves changes from the remote repository) and git merge (which integrates those changes into your local branch).

  used to keep your local repo in sync with remote repo.

39. git push ===> upload local repo updates to remote repo.
Make Changes and Commit:
# Edit files
git add .
git commit -m "Implemented new feature"

Push Changes to the Remote:
git push origin main

Push a New Branch:
git checkout -b feature-branch
git push origin feature-branch

40. git range-diff ===> compare two commit ranges as it will help in easier to review and understand the evolution of code changes in git repo.
git range-diff <commit1>..<commit2>

41. git rebase ===> used to integrate changes from one branch into another by reapplying commits on top of another base commit.

42. git reset ===> used to undo changes in a Git repository by resetting the current branch's state to a specified commit.
If you want to undo the last commit but keep the changes staged:
git reset --soft HEAD~1
If you want to unstage changes but keep them in your working directory:
git reset HEAD <file>
To discard all changes and reset to a specific commit:
git reset --hard <commit>

43. git restore ===> restore working directory files or staging area changes to a specific state.

To discard changes in a file and restore it to the last committed state:
git restore <file>
to unstage a file:
git restore --staged <file>
restore all files in the working directory to their last committed state.
git restore .

44. git revert ===> command is used to create a new commit that undoes the changes made by a previous commit. It is a safe way to undo changes because it does not alter the commit history; instead, it adds a new commit that reverses the effects of the specified commit. 

revert the changes for specific commit.
git revert abc1234

45. git -rm  ===> used to remove files from the working directory and the staging area (index) in a Git repository.

46. git short log ===> command summarizes commit messages in a concise format. 

47. git show ===> The git show command is used to display detailed information about a specific commit, tag, or other Git objects.
git show --pretty=short <commit>

48. git sparse checkout ===> command is a feature in Git that allows you to manage and work with a subset of the files in a repository, rather than checking out the entire working directory

49. git stash ===> command is used to temporarily save changes that are not yet committed. 

50. git status ===>  shows the working tree status

51. git-submodule ===> way to include one git repo as sub directory to another repo

52. git switch ===> to switch to an existing branch
git switch -c <new branch name> to create a new branch and switch to it.

53. git tag  ===> command in git is used to create ,list and manage tags in a repo.

54. gitk ===> graphical history viewer for Git repos.

55. scalar 
managing large repos. partial cloning, spare checkout, backgorund maintenance,advanced config
initialize scalr:
scalar register <repo path>
clone a repo:
scalar clone <repo-url>
unregister repo:
scalar unregister <repo path>


56. git config:
set the config properties.
example:
git config --global user.name "your name"
git config --global user.email "your email"

57. git-fast-export: allows you to export the history of a Git repository into a fast-import stream, which is a format that can be used to transfer a repository's history and contents to another version control system or a different Git repository. 
example : export a branch
git fast-export master > master-export.dat
use case:
Migration: Moving a Git repository to another system or version control tool that supports git fast-import.
Backup: Creating a backup of a Git repository's history that can be imported later.
Filtering: Exporting only specific branches or parts of a repository for analysis or migration.
Anonymization: Sharing a repository’s history without revealing the identities of contributors.

58. git fast import:
allows you to import a Git repository's history and content from a fast-import stream. This command is often used to create or populate a Git repository from data exported using git fast-export, or from data produced by other version control systems that can generate fast-import-compatible streams.
example: git fast-import < ../repo-export.dat
Use Cases
Migrating Repositories: git fast-import is commonly used to migrate repositories from other version control systems (like Mercurial or SVN) to Git, using intermediate tools that convert their histories to the fast-import format.
Large Repository Handling: For repositories with large histories or many branches, using git fast-import in conjunction with git fast-export allows efficient repository cloning, restructuring, or migration.
Custom Import Tools: Developers can write scripts or tools that generate fast-import streams to automate the creation or modification of Git repositories.
Repository Recovery: In some cases, if a repository is corrupted, using git fast-import with a valid fast-export backup can help restore the repository.

59. git-mergetool:
The git mergetool command is used in Git to assist in resolving merge conflicts by launching an external merge tool. When you encounter a merge conflict, Git pauses the merge process and allows you to manually resolve the conflicts. Using git mergetool makes this process easier by providing a graphical or textual interface to compare the conflicting changes and decide how to resolve them.
before use git-mergetool command, set the preferred merge tool

basic usage:
git config --global merge.tool meld
start the merge:
git merge <branch-name>
git mergetool
git add <conflict resolved file>
git commit

60. git prune: The git prune command is used to clean up and remove objects that are no longer being referenced in a Git repository.

git prune --dry-run
git prune --expire=now

61. git-reflog = command is a powerful tool in Git that allows you to view the history of changes made to the references (such as branches, HEAD, etc.) in your repository. This includes not only commits but also other actions like resets, checkouts, and merges. The reflog is particularly useful for recovering lost commits or tracking changes that are not part of the regular commit history, such as when you accidentally move your HEAD or reset a branch.
example:
git reflog show feature-branch

62. git refs

git show-ref
Practical Examples
Finding the Commit a Tag Points To:

git show-ref --tags
Checking Which Commit a Branch Points To:

git show-ref refs/heads/feature-branch
Force Pushing and Updating Remote Refs:

git push origin <local-branch>:refs/heads/<remote-branch>
Resetting a Branch to a Previous Commit:

git update-ref refs/heads/master <commit-sha>

63. git remote ===> used to manage and interact with remote repositories in Git.

list all remotes with their URL's
git remote -v

new remote:
git remote add <name> <url>

remove a remote:
git remote remove <name>

show detailed info about a remote:
git remote show <name>

64. git repack ===> used to optimize the storage of Git objects by repacking them into a more efficient format.

pack all loose objects into a single pack file and remove loose objects:
git repack 

-d tells Git to delete any loose objects that are now unnecessary after the repack.

65. git replace this command is powerful when you need to experiment or make corrections without altering the original history which can be critical in a collaborative environment

git replace <original obj> <replace obj>







