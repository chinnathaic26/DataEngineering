List of Commands :

1. Git --Version or Git -v

2. git --help or git -h

3. git - C <path>  -- git - C <directory path>  commit -m "new commit changes"  ===> allows to run the git commands in different directory than the current directory

4. git -c <name>=<value>  -- git -c <user.name>=<anupappu> commit -m " set new user name n run" ===> allows to set a configuration of command specified for single run alone, doesnt change global or local configuration.

5. export GIT_USER_EMAIL=john@example.com
git --config-env=user.email=GIT_USER_EMAIL commit -m "Commit with environment-based user email"  ===> allows to set dynamically env variable in command 

6. git --exec-path=/opt/git/bin pull   ===> allows to use the executable path having diff versions or core programs of git to run the command

7. git --html-path ===> This command displays the path to the directory containing Git's HTML documentation files.

8.  git --man-path ===> This command will output the path to the directory where Git’s manual pages are installed.

9. git --info-path ===> this command will give info files documenting this version of git

10. git -paginate ===> option that helps with viewing long outputs by paging through them.

11. git --git-dir=/path/to/repo/.git <command> ===> option in Git is used to specify the location of the .git directory.

12. --work-tree=<path>  ===> specifies the working directory for the repository. This is particularly useful when the working directory and the .git directory are in different locations.

13. --namespace=<path>  ===> Namespaces are a feature in Git that allow you to organize and separate multiple repositories within a single Git directory. This is particularly useful for managing and isolating different projects or parts of a large project.

14. bare ==> In Git, a "bare" repository is a repository that does not have a working directory. Instead, it only contains the version control information (the .git directory) and no checked-out copies of the files. 
 
15. git add file1.txt file2.txt ===>  is used to add changes from the working directory to the staging area. This prepares changes for the next commit. 

16. git am  ===> The git am command is used to apply patches from email messages or mailboxes.

17. git -- archive ===> command is used to create an archive file of files from a Git repository.
git archive --format=zip -o archive-name.zip HEAD ===> archive current branch
git archive --format=tar --prefix=project-name/ -o archive-name.tar commit-or-branch-name  ===> create achive of a specific commit or branch
git archive --format=zip -o master.zip master  ===> creating a zip archive of the master branch.

18. git -bisect  ===> tool to find the commit that shows a bug in commit history 
git bisect start
git bisect bad - specify bad commit
git bisect good commit-hash - specify good commit.
git bisect reset

19. git branch ===> git branch (list all branches)
git branch <branch_name> ( create new branch )
git branch -d <branch name> ( delete specified branch)
git branch -D <branch name> ( force deletion )
git branch -m <new branch name> ( rename a branch)
git checkout <branch_name>  (to always switch to the branch where you want to create a new branch or make changes)

20. git bundle ===>  used to create a single file that contains a repository or a subset of a repository, which can then be transferred to another location or system
git bundle create <file.bundle> --all

21.git checkout ===> used to switch between different branches or commit states in your repository. 
git checkout -b <new_branch_name>

22. git cherry-pick ===> allows you to apply the changes from specific commits onto your current branch. This is useful when you want to incorporate individual commits from one branch into another without merging the entire branch.
git cherry-pick <commit_hash>

23. git citool ===>  is a graphical interface for the git commit command. It provides a visual way to review and stage changes before making a commit. 

24. git clean -f ===> remove untracked files in the working directory

25. git clone <repo url> ===> clone a remote repo to local 

26. git commit ===> used to record changes in the local repository.
git commit -m "commit message "

27. git describe ===> used to give a human-readable name to a commit.

28.git diff ===> show changes in commit ,commits and working directory etc..

29. git fetch ===>  is used to download commits, files, and references from a remote repository into your local repository.

30. git gc ===> remove unnecessary files from local repo

31.git grep ====> pattern match
git grep "password" -- find all occurence of password in repo.
git grep "fixme" -- src/  -- in source directory.
git grep "bug" $(git rev-list --all) -- across all branches.

32. git gui ===> graphical user interface to git

33. git -init ===> create an empty git repo or reinitialize existing one

34. git -log ===> show commit logs

35. git merge ===> used to integrate changes from diff branches into current branch in git rep
git merge <branch-name> - merge into currently checked out branch

resolving conflicts - 1. identify conflicts
resolve the conflicts
after that stage the chages using git add
complete the merge - git commit

36.git -mv ===> to move or rename files and directories.

staging the changes, 
When you use git mv, Git automatically stages the move or rename operation. This means you don't need to run git add separately; the change is already prepared for the next commit.
Committing the Changes
After using git mv, you should commit the changes to finalize the move or rename in the repository:
git commit -m "Renamed or moved file"

37. git -notes ===> used to add, edit, display, or delete notes associated with commits in a Git repository. 

git notes add -m "Your note here" <commit -hash>


38. git pull ===> used to fetch and integrate changes from a remote repository into your current branch. It’s a combination of two commands: git fetch (which retrieves changes from the remote repository) and git merge (which integrates those changes into your local branch).

  used to keep your local repo in sync with remote repo.

39. git push ===> upload local repo updates to remote repo.
Make Changes and Commit:
# Edit files
git add .
git commit -m "Implemented new feature"

Push Changes to the Remote:
git push origin main

Push a New Branch:
git checkout -b feature-branch
git push origin feature-branch

40. git range-diff ===> compare two commit ranges as it will help in easier to review and understand the evolution of code changes in git repo.
git range-diff <commit1>..<commit2>

41. git rebase ===> used to integrate changes from one branch into another by reapplying commits on top of another base commit.

42. git reset ===> used to undo changes in a Git repository by resetting the current branch's state to a specified commit.
If you want to undo the last commit but keep the changes staged:
git reset --soft HEAD~1
If you want to unstage changes but keep them in your working directory:
git reset HEAD <file>
To discard all changes and reset to a specific commit:
git reset --hard <commit>

43. git restore ===> restore working directory files or staging area changes to a specific state.

To discard changes in a file and restore it to the last committed state:
git restore <file>
to unstage a file:
git restore --staged <file>
restore all files in the working directory to their last committed state.
git restore .

44. git revert ===> command is used to create a new commit that undoes the changes made by a previous commit. It is a safe way to undo changes because it does not alter the commit history; instead, it adds a new commit that reverses the effects of the specified commit. 

revert the changes for specific commit.
git revert abc1234

45. git -rm  ===> used to remove files from the working directory and the staging area (index) in a Git repository.

46. git short log ===> command summarizes commit messages in a concise format. 

47. git show ===> The git show command is used to display detailed information about a specific commit, tag, or other Git objects.
git show --pretty=short <commit>

48. git sparse checkout ===> command is a feature in Git that allows you to manage and work with a subset of the files in a repository, rather than checking out the entire working directory

49. git stash ===> command is used to temporarily save changes that are not yet committed. 

50. git status ===>  shows the working tree status

51. git-submodule ===> way to include one git repo as sub directory to another repo

52. git switch ===> to switch to an existing branch
git switch -c <new branch name> to create a new branch and switch to it.

53. git tag  ===> command in git is used to create ,list and manage tags in a repo.

54. gitk ===> graphical history viewer for Git repos.

55. scalar

1. GIT - distributes source code management.
2.Git written C and fast run times.
3.repository - contains all catalog's metadata
4. initialize a git rep == git init
5. add readme.md file == git add readme.md
6.commit the changes == git commit -m "added readme.md file"
7. changes the remote file with local changes == git push
8. VCS = veersion control syste == keep track of any changes made to a file or group of data and go back to specific version if necessary.
9.diif types of VCS:
centralised VCS: utilises a central server for code storage and version control.
distributes: decentralised collaboration by providing the each developer with a own repository with complete histroy.
10. git fetch and git pull diff:
git fetch = retrieve changes from remote repo without merge
git pull = retrive changes and merges into active branch.
11.git pull origin master = all changes from origin master branch and merge them into local branch
12. git add == add a file updates to your index from your existing directory.
13. git hooks == this directory contains shell scripts that are run after the related commands run
14. git log = individual commits in your project history.
15. git clone = to make local copy of a remote git repo.
16. GitHub = web based platform used to host and collaborate on software development projects that used Git version control system.
17. what happen if u delete .git directory =  if u delete .git directory you will lose track of project history.
18. In Git, what command creates a Commit Message? = git commit -m "committed message"
19. The following are some fundamental Git operations:
Initialize
Add
Commit
Push
Pull
20. Git -it tree = creates a tree object with the mode and names of all elements,
21. Git - bisect = command aids in the identification of problematic commits.
22. Git rebase = works in a similar way as git merge. With one exception, it merges two branches into a single branch. 
                 The command git rebase rewrites the commit history.
23. Git Merge Conflict = When two commits to a Git repository modify the same lines of code, a Git merge conflict happens. 
                         Git encounters a merge conflict when it tries to reconcile the changes between the two commits automatically.
24. Git clean = untracked files and directoriea are removed from Git working directory repositories.
25. Git config = used to configure your Git installation config parameters.
26. SubGit = tool that allows you to migrate from SVN repos ato Git.
27. how to resolve a conflict in Git? 
If you need to resolve a conflict with Git, update the list to make the necessary changes, then execute "git add" to add the resolved directory, and then "Git commit" to commit the repaired merge.
28. why branching required in GIT - you may retain your branch and hop between different branches with aid of branching.
29. numerous hosting options for Git - Visual Syudio Online, Github, SOurceForge.net,Bitbucket
30.git status = displays the current status of working directory and shows which files are in modified ,staged or committed state.
31.git stash = commonly used to save changes made in file temporarily without committing them to repo such that developer can work on other features by switching branches.
32. git pull request = way to merge the changes made in branch with main code.
33. git merge and git rebase = 
git merge = creates a new commit that combines the changes from both branches
git rebase = moves the entire feature branch to begin on tip of main branch , incorporating all new commits.
34. undo last Git commit = git reset --soft HEAD~1 ( keep changes )
35. undo last Git commit = git reset -- hard HEAD~1 ( discard the changes)
36. Git tags = tags are pointers to specific commits used to mark release versions.
37. Git stash = used to save the changes made in the file temporarily without committing them to the repository such that the developer can work on other features by switching branches.
38. detach HEAD = A detached HEAD state occurs when you check out a specific commit, tag, or remote branch instead of a local branch. 
                 In this state, any new commits you make will not belong to any branch and may be lost once you switch to another branch.
39. create and delete tag = git tag <tagname>, git tag -d <tagname>
40. bare repo in git = that contains no working directory , it mainly used as remote repo for collaboration.
41. .gitignore file = intentionaly untracked files files git should ignore
42. how to apply patch in git? if it's a commit, use git am <patch-file>.
43. temporarily store changes without commiting them in Git ? Git stash
44. git reflog = 
45. Git cherry-pick? apply a specific commit from one branch to another branch.
46. view commit history of a git repo? git log --oneline
47. how do you squash mulitiple commits into one? git rebase -i HEAD ~n
48. rename a local and remote branch in Git ? 
local => git branch -m <old-name> <new-name>
remote => git push origin --delete <old_name> git push origin <new-name>
49. move commits from one branch to another - git cherry-pick <commit-hash>
50.diff between git rebase and git cherry-pick
51. revert a commit => gi revert <commit-hash>
52. diff between git clone and git fork:
git clone - local copy of a repo
git fork = create a personal copy of someone else's repo under your account and allowing you to freely modify it.
53. how to fix a broken commit - git commit --amend
54. git -rm [file] = delete the file from working directory and stages the deletion.
55. git log == version history
56. git show [commit] = shows metadata and content changes of specified commit.
57. git tag [commitID] = used to give tags to specified commit.
58. git checkout [branch name] = used to switch from ome branch to another.
59. git checkout -b [branch name] = creates a new branch and also switches to it.

















